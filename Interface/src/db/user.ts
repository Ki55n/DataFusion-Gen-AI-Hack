"use server";

import { MongoClient, ObjectId, ServerApiVersion } from "mongodb";

const uri = process.env.NEXT_PUBLIC_MONGO_URL || "";
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  },
});

interface User {
  _id: ObjectId; // User id passed explicitly, not generated by MongoDB
  name: string;
  email: string;
  projects: ObjectId[]; // Projects are stored as ObjectIds
}

async function getUser(userId: string): Promise<User | null> {
  try {
    await client.connect();
    const database = client.db("test");
    const users = database.collection<User>("users");
    const user = await users.findOne({ _id: new ObjectId(userId) });
    return user;
  } finally {
    await client.close();
  }
}

async function addUser(
  userId: string,
  name: string,
  email: string,
  projects: ObjectId[] = []
): Promise<void> {
  try {
    await client.connect();
    const database = client.db("test");
    const users = database.collection<User>("users");
    // _id is passed explicitly as userId
    await users.insertOne({
      _id: new ObjectId(userId),
      name,
      email,
      projects,
    });
  } finally {
    await client.close();
  }
}

async function updateUser(
  userId: string,
  name: string,
  email: string,
  projects: ObjectId[]
): Promise<void> {
  try {
    await client.connect();
    const database = client.db("test");
    const users = database.collection<User>("users");
    await users.updateOne(
      { _id: new ObjectId(userId) },
      { $set: { name, email, projects } }
    );
  } finally {
    await client.close();
  }
}

async function deleteUser(userId: string): Promise<void> {
  try {
    await client.connect();
    const database = client.db("test");
    const users = database.collection<User>("users");
    await users.deleteOne({ _id: new ObjectId(userId) });
  } finally {
    await client.close();
  }
}

async function addProjectToUser(
  userId: string,
  projectId: string
): Promise<void> {
  try {
    await client.connect();
    const database = client.db("test");
    const users = database.collection<User>("users");
    const user = await users.findOne({ _id: new ObjectId(userId) });
    if (user) {
      user.projects.push(new ObjectId(projectId));
      await users.updateOne(
        { _id: new ObjectId(userId) },
        { $set: { projects: user.projects } }
      );
    }
  } finally {
    await client.close();
  }
}

async function removeProjectFromUser(
  userId: string,
  projectId: string
): Promise<void> {
  try {
    await client.connect();
    const database = client.db("test");
    const users = database.collection<User>("users");
    const user = await users.findOne({ _id: new ObjectId(userId) });
    if (user) {
      const index = user.projects.indexOf(new ObjectId(projectId));
      if (index > -1) {
        user.projects.splice(index, 1);
        await users.updateOne(
          { _id: new ObjectId(userId) },
          { $set: { projects: user.projects } }
        );
      }
    }
  } finally {
    await client.close();
  }
}

export const findUserByEmail = async (email: any) => {
  try {
    await client.connect();
    const db = client.db("your-database-name");
    const usersCollection = db.collection("users");

    // Check if a user with the given email exists
    const user = await usersCollection.findOne({ email });

    return user;
  } catch (error) {
    console.error("Error checking for user:", error);
  } finally {
    await client.close();
  }
};

export {
  getUser,
  addUser,
  updateUser,
  deleteUser,
  addProjectToUser,
  removeProjectFromUser,
};
